# Adamize Project Guidelines

## Project Overview

Adamize is a VS Code extension creating a development assistant that integrates with local LLMs through the Model Context Protocol (MCP), following test-driven development with DevOps best practices.

## Development Workflow

This project follows a STRICT test-driven development workflow:

1. Define requirements with clear requirement tags (REQ-XXX-YYY)
2. ALWAYS write tests BEFORE implementation code with test tags (TEST-XXX-YYY)
3. Run tests to verify they FAIL (Red phase)
4. Implement code to pass tests with implementation tags (IMPL-XXX-YYY)
5. Run tests to verify they PASS (Green phase)
6. Refactor while maintaining test coverage
7. Document the implementation

### CRITICAL TDD RULES

- NEVER write implementation code without a failing test first
- NEVER create a new file without its corresponding test file
- ALWAYS run tests after making changes
- Use the tagging system for traceability
- Commit code ONLY after tests are passing (Green phase)
- Use GREEN code-test pairs identification tools for staging/committing

### TDD Workflow Commands

- `npm run tdd` - Watch for changes and run tests automatically
- `npm run tdd:mcp` - Focus on MCP client implementation
- `npm run test:unit` - Run Jest unit tests
- `npm run test:coverage` - Generate coverage reports
- `npm run identify:green` - Identify and stage passing tests and implementations
- `npm run identify:green:commit` - Identify, stage, and commit passing tests
- `npm run create:test` - Generate a new test file from template
- `npm run generate:tests` - Generate tests for a specific file

## Code Standards

- TypeScript for all code
- ESLint for code linting
- Prettier for code formatting
- Jest for testing
- 100% test coverage for core functionality
- Documentation for all public APIs
- Strict TypeScript configuration
- Requirement tags for traceability

### Dependency Management Philosophy

- The project uses the newest possible versions of all dependencies
- Dependencies should be updated one at a time, checking integration after each update
- Current dependency versions (as of last update):
  - TypeScript: 5.8.3
  - ESLint: 9.26.0
  - @vscode/vsce: 3.3.2
  - Jest: 29.7.0
  - Webpack: 5.91.0
- ESLint 9 configuration is in eslint.config.js using the new flat config format
- VS Code engine version is set to match the @types/vscode version

### Tagging System

- `REQ-XXX-YYY` - Requirement tags (e.g., REQ-MCP-001)
- `TEST-XXX-YYY` - Test tags (e.g., TEST-MCP-001)
- `IMPL-XXX-YYY` - Implementation tags (e.g., IMPL-MCP-001)

## Git Workflow

- Feature branches for all changes
- Pull requests for code review
- CI/CD pipeline must pass before merging
- Semantic versioning for releases
- Conventional commits for commit messages

## Key Features

### GREEN Code-Test Pairs Identification

Identifies passing tests and their implementations for staging/committing. See `docs/dev/green-code-test-pairs.md`.

### Procedural Test Generation

Generates tests based on source code analysis and coverage data. See `docs/dev/procedural-test-generation.md`.

### AI-Powered Test Generation

Uses local LLMs to generate intelligent tests. See `docs/dev/ai-powered-test-generation.md`.

## MCP Client Implementation

Core functionality:

- Connect to MCP servers
- Discover available tools
- Call functions on tools
- Handle responses and errors

## MCP Bridge Implementation

Adapts ollama-mcp-bridge for VS Code extension use, enabling LLM-powered agents.

### Components Status

- VS Code Logger ✅
- Bridge Types ✅
- MCP Bridge Client ✅
- LLM Client ✅
- Tool Registry ✅ - Enhanced with sophisticated tool detection, categorization, and context-aware example generation
- MCP Bridge (partial) - Needs completion for tool execution and conversation context
- MCP Bridge Manager (partial) - Needs completion for bridge lifecycle management

### Implementation Priority

1. ✅ Complete Tool Registry - Tool detection, format instructions, example arguments
2. Complete MCP Bridge - Tool execution, conversation context, streaming responses
3. Complete Bridge Manager - Bridge creation, lifecycle management, configuration

## Ollama Integration

Enables local LLMs through Ollama for various features.

### Components Status

- LLM Bridge Client ✅
- Ollama Configuration View ✅
- Ollama Commands ✅
- MCP Bridge Integration (partial)

### Ollama Model Management

- Model Discovery, Pulling, and Removal ✅
- Server Control from VS Code ✅
- Chat Integration ✅
- Dedicated Model Manager view ✅
- Model Configuration Presets ✅
- MCP Tool Integration ✅

## Model Management Architecture

The model management system follows a modular, maintainable architecture:

### Interface Hierarchy

- `IModelOperationHandler`: Interface for model operations
- Provider-specific implementations:
  - `OllamaModelHandler`: For Ollama models
  - `LocalModelHandler`: For local models
  - `HuggingFaceModelHandler`: (Planned) For HuggingFace models

### Factory Pattern

- `ModelHandlerFactory`: Creates and manages handler instances
  - `createHandler(providerType)`: Creates a handler for a specific provider
  - `getAllHandlers()`: Returns all available handlers

### Service Layer

- `ModelDiscoveryService`: Handles discovering models
- `ModelManagementService`: Handles model operations (pull, remove)
- `ModelConfigurationService`: Handles model configuration presets

### Refactored ModelManager

- Uses the service layer and handlers for model operations
- Maintains backward compatibility with existing interfaces
- Provides improved error handling and progress reporting

See `docs/features/model-management-architecture.md` for detailed documentation.

## Notion Integration

Currently marked as "coming soon" - structure and tests created but disabled.

## Project Structure

- `src/` - Source code (extension.ts, mcp/, ui/, commands/)
- `test/` - Test code (suite/, templates/, setup.ts, runTest.ts)
- `docs/` - Documentation
- `templates/` - Template files
- `scripts/` - Development scripts
- `.devcontainer/` - Development container configuration
- `.github/` - GitHub workflows and templates

## Development Environment

Uses a DevContainer with Node.js, TypeScript, ESLint, VS Code extension tools, Docker, and Git.

## Testing Strategy

- Unit tests for all components
- Integration tests for the extension
- End-to-end tests for user workflows
- Coverage reports for all tests
- Automated testing in CI/CD pipeline
- Mock external dependencies in unit tests
- Use NODE_ENV=test for environment-specific test behavior

## UI Components

- MemoryGraphView: Memory graph visualization (partial)
- MCPChatView: Chat interface for LLMs (partial) - Needs completion for streaming responses
- MCPServerExplorerView: MCP server management (partial) - Needs completion for tool discovery
- OllamaConfigView: Ollama settings configuration ✅

## Extension Bundling

- Bundled with webpack for better performance
- Output in dist directory
- Current package size: 1.62 MB (reduced from 3.68 MB)

## Implementation Roadmap

### Phase 1: Core Functionality (High Priority)

1. ✅ Complete MCPToolRegistry - Tool detection, instructions generation, example arguments
   - Enhanced with sophisticated scoring for tool detection
   - Added support for categorized tools and better formatting
   - Implemented context-aware example generation
   - Added defensive checks for parameters
2. Complete MCPBridge - Tool execution, conversation context, streaming responses
3. Complete MCPBridgeManager - Bridge lifecycle management, configuration

### Phase 2: UI Components (Medium Priority)

1. Complete MCPChatView - Message handling, streaming, conversation history
2. Complete MCPServerExplorerView - Server management, tool discovery
3. Add UI component tests

### Phase 3: Integration and Testing (Medium Priority)

1. Create integration tests for MCP Bridge components
2. Create end-to-end tests for extension functionality
3. Implement skipped tests

### Phase 4: Documentation and Configuration (Low Priority)

1. Update documentation for all components
2. Add configuration options for MCP Bridge
3. Create user guides for extension

## Documentation Requirements

- README.md with project overview and setup
- CONTRIBUTING.md with contribution guidelines
- API documentation for all public interfaces
- User and development documentation

# Adamize Project Guidelines

## Project Overview
Adamize is a VS Code extension project focused on creating a development assistant similar to Augment Code but with specific differences and improvements. The project follows a test-driven development approach with a strong emphasis on DevOps best practices and integrates with local LLMs through the Model Context Protocol (MCP).

## Development Workflow
This project follows a STRICT test-driven development workflow. You MUST follow these steps in order:

1. Define requirements and acceptance criteria with clear requirement tags (REQ-XXX-YYY)
2. ALWAYS write tests BEFORE implementation code - tests MUST validate the requirements with corresponding test tags (TEST-XXX-YYY)
3. Run the tests to verify they FAIL (Red phase)
4. ONLY THEN implement code to pass the tests with implementation tags (IMPL-XXX-YYY)
5. Run the tests to verify they PASS (Green phase)
6. Refactor while maintaining test coverage
7. Document the implementation

### CRITICAL TDD RULES
- You MUST NEVER write implementation code without a failing test first
- You MUST NEVER create a new file without its corresponding test file
- You MUST ALWAYS run tests after making changes to verify they pass
- You MUST use the tagging system to maintain traceability between requirements, tests, and implementation
- You MUST commit code ONLY after tests are passing (Green phase)
- You MUST use the GREEN code-test pairs identification tools for staging and committing

### TDD Workflow Commands
- `npm run tdd` - Watch for changes and run tests automatically
- `npm run tdd:mcp` - Focus on MCP client implementation
- `npm run tdd:auto-stage` - Watch for changes and automatically stage passing tests
- `npm run tdd:auto-commit` - Watch for changes and automatically commit passing tests
- `npm run create:test` - Generate a new test file from template
- `npm run test:unit` - Run Jest unit tests
- `npm run test:unit:watch` - Run Jest tests in watch mode
- `npm run test:coverage` - Generate coverage reports
- `npm run identify:green` - Identify and stage passing tests and their implementations
- `npm run identify:green:commit` - Identify, stage, and commit passing tests
- `npm run identify:green:dry` - Dry run to see what would be staged/committed

## Code Standards
- TypeScript for all code
- ESLint for code linting
- Prettier for code formatting
- Jest for testing
- 100% test coverage for core functionality
- Documentation for all public APIs
- Strict TypeScript configuration
- Comprehensive type definitions
- Requirement tags for traceability

### Tagging System
- `REQ-XXX-YYY` - Requirement tags (e.g., REQ-MCP-001)
- `TEST-XXX-YYY` - Test tags (e.g., TEST-MCP-001)
- `IMPL-XXX-YYY` - Implementation tags (e.g., IMPL-MCP-001)

This tagging system ensures traceability between requirements, tests, and implementation code.

## Git Workflow
- Feature branches for all changes
- Pull requests for code review
- CI/CD pipeline must pass before merging
- Semantic versioning for releases
- Conventional commits for commit messages

### GREEN Code-Test Pairs Identification
The project includes a feature for identifying "green" code-test pairs (passing tests and their implementations) and staging them for commit. This supports the TDD workflow by making it easier to commit code at the right point in the TDD cycle.

- **Automatic Test Running**: Runs tests to identify passing tests
- **Implementation File Mapping**: Maps test files to their implementation files
- **Automatic Staging**: Stages passing tests and their implementations
- **Automatic Committing**: Optionally commits the staged files
- **Tag-Based Mapping**: Uses the project's tagging system to map tests to implementations

See `docs/dev/green-code-test-pairs.md` for detailed documentation.

## MCP Client Implementation
The first feature to be implemented is an MCP (Model Context Protocol) client that will:
- Connect to MCP servers
- Discover available tools
- Call functions on tools
- Handle responses and errors

### MCP Client Requirements
- **REQ-MCP-001**: Connect to an MCP server via HTTP
- **REQ-MCP-002**: Discover available tools from the MCP server
- **REQ-MCP-003**: Retrieve the schema for a specific tool
- **REQ-MCP-010**: Call functions on tools with parameters
- **REQ-MCP-011**: Validate parameters against the function schema
- **REQ-MCP-012**: Handle successful function call responses
- **REQ-MCP-013**: Handle error responses from function calls
- **REQ-MCP-020**: Handle connection errors gracefully
- **REQ-MCP-021**: Handle tool discovery errors gracefully
- **REQ-MCP-022**: Handle schema retrieval errors gracefully
- **REQ-MCP-023**: Handle parameter validation errors gracefully
- **REQ-MCP-030**: Log connection attempts and results
- **REQ-MCP-031**: Log tool discovery attempts and results
- **REQ-MCP-032**: Log function calls and results
- **REQ-MCP-033**: Log errors with appropriate detail

## MCP Bridge Implementation
The MCP Bridge implementation adapts the ollama-mcp-bridge repository for use in our VS Code extension. It enables local LLM-powered agents to maintain and update a memory graph of project knowledge.

### MCP Bridge Components
- **VS Code Logger**: Replaces console-based logging with VS Code output channel
- **Bridge Types**: Defines types for the MCP Bridge components
- **MCP Bridge Client**: Handles communication with MCP servers
- **LLM Client**: Handles communication with Ollama (to be implemented)
- **Tool Registry**: Manages tool registration and discovery (to be implemented)
- **MCP Bridge**: Core bridge component that manages tool registration and execution (to be implemented)
- **MCP Bridge Manager**: Manages the bridge lifecycle and integration with VS Code (to be implemented)

### MCP Bridge Requirements
- **REQ-LOGGER-001**: Replace console-based logging with VS Code output channel
- **REQ-LOGGER-002**: Support different log levels (debug, info, warn, error)
- **REQ-LOGGER-003**: Support log formatting
- **REQ-LOGGER-004**: Support log filtering by level
- **REQ-TYPES-001**: Adapt types to work with VS Code extension context
- **REQ-TYPES-002**: Add VS Code-specific types
- **REQ-TYPES-003**: Ensure compatibility with existing MCP types
- **REQ-TYPES-004**: Add types for configuration management
- **REQ-TYPES-005**: Support multiple connection methods
- **REQ-TYPES-006**: Support multiple MCP servers
- **REQ-MCPCLIENT-001**: Replace process spawning with VS Code-compatible approach
- **REQ-MCPCLIENT-002**: Adapt JSON-RPC communication for VS Code
- **REQ-MCPCLIENT-003**: Integrate with VS Code's output channel for logging
- **REQ-MCPCLIENT-004**: Add support for multiple connection methods
- **REQ-MCPCLIENT-005**: Ensure compatibility with existing MCP client
- **REQ-MCPCLIENT-006**: Support tool discovery and registration
- **REQ-MCPCLIENT-007**: Support function calling with parameter validation
- **REQ-MCPCLIENT-008**: Handle connection errors gracefully
- **REQ-MCPCLIENT-009**: Support multiple MCP servers

## Project Structure
- `src/` - Source code
  - `extension.ts` - Extension entry point
  - `mcp/` - MCP client implementation
    - `mcpClient.ts` - Main MCP client class
    - `mcpTypes.ts` - Type definitions
    - `mcpUtils.ts` - Utility functions
    - `bridge/` - MCP Bridge implementation
      - `vscodeLogger.ts` - VS Code Logger implementation
      - `bridgeTypes.ts` - Bridge type definitions
      - `mcpBridgeClient.ts` - MCP Bridge Client implementation
      - `llmClient.ts` - LLM Client implementation (to be implemented)
      - `toolRegistry.ts` - Tool Registry implementation (to be implemented)
      - `mcpBridge.ts` - MCP Bridge implementation (to be implemented)
      - `mcpBridgeManager.ts` - MCP Bridge Manager implementation (to be implemented)
  - `test/` - Test code
    - `suite/` - Test suites
      - `mcp/` - MCP client tests
        - `mcpClient.test.ts` - Tests for MCP client
        - `mcpUtils.test.ts` - Tests for utility functions
        - `bridge/` - MCP Bridge tests
          - `vscodeLogger.test.ts` - Tests for VS Code Logger
          - `mcpBridgeClient.test.ts` - Tests for MCP Bridge Client
          - `llmClient.test.ts` - Tests for LLM Client (to be implemented)
          - `toolRegistry.test.ts` - Tests for Tool Registry (to be implemented)
          - `mcpBridge.test.ts` - Tests for MCP Bridge (to be implemented)
          - `mcpBridgeManager.test.ts` - Tests for MCP Bridge Manager (to be implemented)
    - `templates/` - Test templates
    - `setup.ts` - Test setup
    - `runTest.ts` - Test runner
- `docs/` - Documentation
  - `CONTRIBUTING.md` - Contribution guidelines
  - `dev/` - Development documentation
    - `research/` - Research documents
    - `green-code-test-pairs.md` - Documentation for GREEN code-test pairs identification
- `scripts/` - Development scripts
  - `tdd.js` - TDD helper script
  - `create-test.js` - Test generator script
  - `identify-green-pairs.js` - GREEN code-test pairs identification script
- `.devcontainer/` - Development container configuration
- `.github/` - GitHub workflows and templates
  - `workflows/` - GitHub Actions workflows
    - `ci.yml` - Continuous integration workflow
    - `release.yml` - Release workflow
    - `pr-validation.yml` - Pull request validation workflow

## Development Environment
The project uses a dedicated DevContainer for development to ensure consistency and isolation from the host system. The DevContainer includes:
- Node.js and npm
- TypeScript and ESLint
- VS Code extension development tools
- Docker for testing with containers
- Git for version control

## Testing Strategy
- Unit tests for all components
- Integration tests for the extension
- End-to-end tests for user workflows
- Coverage reports for all tests
- Automated testing in CI/CD pipeline

### MCP Client Test Plan
- **TEST-MCP-001**: Test that the client can connect to an MCP server successfully
- **TEST-MCP-001a**: Test that the client handles connection errors gracefully
- **TEST-MCP-002**: Test that the client can discover available tools from the MCP server
- **TEST-MCP-002a**: Test that the client handles tool discovery errors gracefully
- **TEST-MCP-003**: Test that the client can retrieve the schema for a specific tool
- **TEST-MCP-003a**: Test that the client handles schema retrieval errors gracefully
- **TEST-MCP-010**: Test that the client can call functions on tools with parameters
- **TEST-MCP-011**: Test that the client validates parameters against the function schema
- **TEST-MCP-011a**: Test that the client rejects invalid parameters
- **TEST-MCP-012**: Test that the client handles successful function call responses
- **TEST-MCP-013**: Test that the client handles error responses from function calls
- **TEST-MCP-030**: Test that the client logs connection attempts and results
- **TEST-MCP-031**: Test that the client logs tool discovery attempts and results
- **TEST-MCP-032**: Test that the client logs function calls and results
- **TEST-MCP-033**: Test that the client logs errors with appropriate detail

### MCP Bridge Test Plan
- **TEST-LOGGER-001**: Test that the logger can be created with an output channel
- **TEST-LOGGER-002**: Test that the logger logs messages at different levels
- **TEST-LOGGER-003**: Test that the logger formats messages correctly
- **TEST-LOGGER-004**: Test that the logger filters messages by level
- **TEST-MCPCLIENT-001**: Test that the client can connect to an MCP server via local process
- **TEST-MCPCLIENT-002**: Test that the client can connect to an MCP server via HTTP
- **TEST-MCPCLIENT-003**: Test that the client can connect to an MCP server via Docker exec
- **TEST-MCPCLIENT-004**: Test that the client can get available tools
- **TEST-MCPCLIENT-005**: Test that the client can call a tool
- **TEST-MCPCLIENT-006**: Test that the client handles connection errors gracefully
- **TEST-MCPCLIENT-007**: Test that the client handles tool call errors gracefully
- **TEST-MCPCLIENT-008**: Test that the client can close the connection
- **TEST-MCPCLIENT-009**: Test that the client integrates with VS Code's output channel

## Documentation Requirements
- README.md with project overview and setup instructions
- CONTRIBUTING.md with contribution guidelines
- API documentation for all public interfaces
- User documentation for the extension
- Development guides for contributors

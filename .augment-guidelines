# Adamize Project Guidelines

## Project Overview

Adamize is a VS Code extension creating a development assistant that integrates with local LLMs through the Model Context Protocol (MCP), following test-driven development with DevOps best practices.

## Development Workflow

This project follows a STRICT test-driven development workflow:

1. Define requirements with clear requirement tags (REQ-XXX-YYY)
2. ALWAYS write tests BEFORE implementation code with test tags (TEST-XXX-YYY)
3. Run tests to verify they FAIL (Red phase)
4. Implement code to pass tests with implementation tags (IMPL-XXX-YYY)
5. Run tests to verify they PASS (Green phase)
6. Refactor while maintaining test coverage
7. Document the implementation

### CRITICAL TDD RULES

- NEVER write implementation code without a failing test first
- NEVER create a new file without its corresponding test file
- ALWAYS run tests after making changes
- Use the tagging system for traceability
- Commit code ONLY after tests are passing (Green phase)
- Use GREEN code-test pairs identification tools for staging/committing

### TDD Workflow Commands

- `npm run tdd` - Watch for changes and run tests automatically
- `npm run tdd:mcp` - Focus on MCP client implementation
- `npm run test:unit` - Run Jest unit tests
- `npm run test:coverage` - Generate coverage reports
- `npm run identify:green` - Identify and stage passing tests and implementations
- `npm run identify:green:commit` - Identify, stage, and commit passing tests
- `npm run create:test` - Generate a new test file from template
- `npm run generate:tests` - Generate tests for a specific file

## Code Standards

- TypeScript for all code
- ESLint for code linting
- Prettier for code formatting
- Jest for testing
- 100% test coverage for core functionality
- Documentation for all public APIs
- Strict TypeScript configuration
- Requirement tags for traceability

### Dependency Management Philosophy

- The project uses the newest possible versions of all dependencies
- Dependencies should be updated one at a time, checking integration after each update
- Current dependency versions (as of last update):
  - TypeScript: 5.8.3
  - ESLint: 9.26.0
  - @vscode/vsce: 3.3.2
  - Jest: 29.7.0
  - Webpack: 5.91.0
- ESLint 9 configuration is in eslint.config.js using the new flat config format
- VS Code engine version is set to match the @types/vscode version

### Tagging System

- `REQ-XXX-YYY` - Requirement tags (e.g., REQ-MCP-001)
- `TEST-XXX-YYY` - Test tags (e.g., TEST-MCP-001)
- `IMPL-XXX-YYY` - Implementation tags (e.g., IMPL-MCP-001)

## Git Workflow

- Feature branches for all changes
- Pull requests for code review
- CI/CD pipeline must pass before merging
- Semantic versioning for releases
- Conventional commits for commit messages

## Key Features

### GREEN Code-Test Pairs Identification

Identifies passing tests and their implementations for staging/committing. See `docs/dev/green-code-test-pairs.md`.

### Procedural Test Generation

Generates tests based on source code analysis and coverage data. See `docs/dev/procedural-test-generation.md`.

### AI-Powered Test Generation

Uses local LLMs to generate intelligent tests. See `docs/dev/ai-powered-test-generation.md`.

## MCP Client Implementation

Core functionality:

- Connect to MCP servers
- Discover available tools
- Call functions on tools
- Handle responses and errors

## MCP Bridge Implementation

Adapts ollama-mcp-bridge for VS Code extension use, enabling LLM-powered agents.

### Components Status

- VS Code Logger ✅
- Bridge Types ✅
- MCP Bridge Client ✅
- LLM Client ✅
- Tool Registry (partial)
- MCP Bridge (partial)
- MCP Bridge Manager (partial)

## Ollama Integration

Enables local LLMs through Ollama for various features.

### Components Status

- LLM Bridge Client ✅
- Ollama Configuration View ✅
- Ollama Commands ✅
- MCP Bridge Integration (partial)

### Ollama Model Management

- Model Discovery, Pulling, and Removal ✅
- Server Control from VS Code ✅
- Chat Integration ✅
- Dedicated Model Manager view ✅
- Model Configuration Presets ✅
- MCP Tool Integration ✅

## Notion Integration

Currently marked as "coming soon" - structure and tests created but disabled.

## Project Structure

- `src/` - Source code (extension.ts, mcp/, ui/, commands/)
- `test/` - Test code (suite/, templates/, setup.ts, runTest.ts)
- `docs/` - Documentation
- `templates/` - Template files
- `scripts/` - Development scripts
- `.devcontainer/` - Development container configuration
- `.github/` - GitHub workflows and templates

## Development Environment

Uses a DevContainer with Node.js, TypeScript, ESLint, VS Code extension tools, Docker, and Git.

## Testing Strategy

- Unit tests for all components
- Integration tests for the extension
- End-to-end tests for user workflows
- Coverage reports for all tests
- Automated testing in CI/CD pipeline
- Mock external dependencies in unit tests
- Use NODE_ENV=test for environment-specific test behavior

## UI Components

- MemoryGraphView: Memory graph visualization (partial)
- MCPChatView: Chat interface for LLMs (partial)
- MCPServerExplorerView: MCP server management (partial)
- OllamaConfigView: Ollama settings configuration ✅

## Extension Bundling

- Bundled with webpack for better performance
- Output in dist directory
- Current package size: 1.62 MB (reduced from 3.68 MB)

## Next Steps

1. Complete remaining UI components
2. Add more UI component tests
3. Implement skipped tests
4. Complete Ollama integration
5. Improve MCP Bridge implementation
6. Complete Notion integration
7. Add end-to-end tests

## Documentation Requirements

- README.md with project overview and setup
- CONTRIBUTING.md with contribution guidelines
- API documentation for all public interfaces
- User and development documentation

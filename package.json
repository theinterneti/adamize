{
  "name": "adamize",
  "displayName": "Adamize",
  "description": "AI-assisted development with a focus on test-driven development and DevOps best practices",
  "version": "0.0.1",
  "publisher": "adamize",
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "views": {
      "explorer": [
        {
          "id": "mcpServerExplorer",
          "name": "MCP Servers",
          "icon": "$(server)"
        }
      ]
    },
    "configuration": {
      "title": "Adamize",
      "properties": {
        "adamize.environment": {
          "type": "string",
          "enum": [
            "development",
            "testing",
            "production"
          ],
          "default": "development",
          "description": "Environment type (development, testing, production)"
        },
        "adamize.mcp.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable MCP client"
        },
        "adamize.mcp.serverUrl": {
          "type": "string",
          "default": "http://localhost:8000",
          "description": "MCP server URL"
        },
        "adamize.mcp.neo4jServerUrl": {
          "type": "string",
          "default": "http://localhost:8001",
          "description": "Neo4j MCP server URL"
        },
        "adamize.mcp.connectionMethod": {
          "type": "string",
          "enum": [
            "http",
            "docker-exec",
            "local-process",
            "auto"
          ],
          "default": "auto",
          "description": "MCP connection method (http, docker-exec, local-process, auto)"
        },
        "adamize.services": {
          "type": "object",
          "default": {},
          "description": "Service URLs",
          "properties": {
            "augment": {
              "type": "string",
              "default": "http://localhost:8000",
              "description": "Augment service URL"
            },
            "chromadb": {
              "type": "string",
              "default": "http://localhost:8000",
              "description": "ChromaDB service URL"
            },
            "mcp-memory": {
              "type": "string",
              "default": "mcp/memory",
              "description": "MCP Memory container name"
            },
            "mcp-neo4j-memory": {
              "type": "string",
              "default": "mcp/neo4j-memory",
              "description": "MCP Neo4j Memory container name"
            }
          }
        },
        "adamize.contextEngine": {
          "type": "object",
          "description": "Context engine settings",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Enable the context engine"
            },
            "tokenLimit": {
              "type": "number",
              "default": 4000,
              "description": "Maximum number of tokens in the context"
            },
            "maxChunks": {
              "type": "number",
              "default": 10,
              "description": "Maximum number of chunks to include in the context"
            }
          }
        },
        "adamize.fileWatcher": {
          "type": "object",
          "description": "File watcher settings",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Enable the file watcher"
            },
            "patterns": {
              "type": "array",
              "default": [
                "**/*.{js,ts,jsx,tsx,py,java,c,cpp,h,hpp,cs,go,rb,php,rs,swift,kt,html,css,scss,sass,json,yaml,yml,xml,md}"
              ],
              "description": "File patterns to watch"
            },
            "ignored": {
              "type": "array",
              "default": [
                "**/node_modules/**",
                "**/.git/**",
                "**/dist/**",
                "**/build/**",
                "**/.vscode/**",
                "**/out/**"
              ],
              "description": "File patterns to ignore"
            }
          }
        }
      }
    },
    "commands": [
      {
        "command": "adamize.showWelcome",
        "title": "Show Welcome",
        "category": "Adamize"
      },
      {
        "command": "adamize.connectMCP",
        "title": "Connect to MCP Server",
        "category": "Adamize"
      },
      {
        "command": "adamize.listMCPTools",
        "title": "List MCP Tools",
        "category": "Adamize"
      },
      {
        "command": "adamize.runTests",
        "title": "Run Tests",
        "category": "Adamize"
      },
      {
        "command": "adamize.runTestsWithCoverage",
        "title": "Run Tests with Coverage",
        "category": "Adamize"
      },
      {
        "command": "adamize.searchMemory",
        "title": "Search Memory",
        "category": "Adamize"
      },
      {
        "command": "adamize.refreshMCPServers",
        "title": "Refresh MCP Servers",
        "category": "Adamize",
        "icon": "$(refresh)"
      },
      {
        "command": "adamize.addMCPServer",
        "title": "Add MCP Server",
        "category": "Adamize",
        "icon": "$(add)"
      },
      {
        "command": "adamize.startMCPServer",
        "title": "Start MCP Server",
        "category": "Adamize",
        "icon": "$(play)"
      },
      {
        "command": "adamize.stopMCPServer",
        "title": "Stop MCP Server",
        "category": "Adamize",
        "icon": "$(stop)"
      },
      {
        "command": "adamize.showToolDetails",
        "title": "Show Tool Details",
        "category": "Adamize",
        "icon": "$(info)"
      },
      {
        "command": "adamize.openMCPChat",
        "title": "Open MCP Chat",
        "category": "Adamize",
        "icon": "$(comment)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "adamize.refreshMCPServers",
          "when": "view == mcpServerExplorer",
          "group": "navigation"
        },
        {
          "command": "adamize.addMCPServer",
          "when": "view == mcpServerExplorer",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "adamize.startMCPServer",
          "when": "view == mcpServerExplorer && viewItem == mcpServer-stopped",
          "group": "inline"
        },
        {
          "command": "adamize.stopMCPServer",
          "when": "view == mcpServerExplorer && viewItem == mcpServer-running",
          "group": "inline"
        },
        {
          "command": "adamize.showToolDetails",
          "when": "view == mcpServerExplorer && viewItem == mcpTool",
          "group": "inline"
        },
        {
          "command": "adamize.openMCPChat",
          "when": "view == mcpServerExplorer && viewItem == mcpServer-running",
          "group": "navigation"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "test:unit": "jest",
    "test:unit:watch": "jest --watch",
    "test:integration": "UNIT_TESTS_ONLY=false node ./out/test/runTest.js",
    "test:coverage": "nyc --reporter=lcov --reporter=text node ./out/test/runTest.js",
    "test:jest:coverage": "jest --coverage",
    "test:watch": "nodemon --watch src --ext ts --exec 'npm test'",
    "tdd": "node scripts/tdd.js",
    "tdd:mcp": "node scripts/tdd.js --watch-path=src/mcp --test-path=src/test/suite",
    "tdd:auto-stage": "node scripts/tdd.js --auto-stage",
    "tdd:auto-commit": "node scripts/tdd.js --auto-commit",
    "create:test": "node scripts/create-test.js",
    "create:enhanced-test": "node scripts/create-enhanced-test.js",
    "update:tests": "node scripts/update-tests.js",
    "check:ci": "node scripts/check-ci-compatibility.js",
    "pre:pr": "npm run lint && npm run typecheck && npm run test:unit && npm run check:ci",
    "typecheck": "tsc --noEmit",
    "lint:fix": "eslint src --ext ts --fix",
    "precommit": "lint-staged",
    "package": "@vscode/vsce package",
    "publish": "@vscode/vsce publish",
    "identify:green": "node scripts/identify-green-pairs.js",
    "identify:green:commit": "node scripts/identify-green-pairs.js --commit",
    "identify:green:dry": "node scripts/identify-green-pairs.js --dry-run --verbose"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.17.43",
    "@types/sinon": "^17.0.4",
    "@types/uuid": "^9.0.8",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "@vscode/test-electron": "^2.3.9",
    "@vscode/vsce": "^2.15.0",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "glob": "^10.3.10",
    "jest": "^29.7.0",
    "mocha": "^10.3.0",
    "nodemon": "^3.1.0",
    "nyc": "^15.1.0",
    "prettier": "^3.2.5",
    "sinon": "^17.0.1",
    "ts-jest": "^29.1.2",
    "typescript": "^5.4.5"
  },
  "dependencies": {
    "axios": "^1.6.8",
    "chokidar": "^3.6.0",
    "eventsource": "^3.0.6",
    "uuid": "^9.0.1"
  }
}
